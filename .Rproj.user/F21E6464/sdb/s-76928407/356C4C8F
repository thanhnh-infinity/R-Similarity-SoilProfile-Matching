{
    "contents" : "# Consider the User Record data you want\nplot_id = 2360\n\n########################################\n####Design Functions####################\n########################################\nmappingStage1andStage2 <- function(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST,WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT){\n  wiseSize <- length(WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT[,\"WISE3_ID\"])\n  WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST <- subset(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST,(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST$WISE3_ID %in% WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT$WISE3_ID) & as.numeric(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST$HONU) == 1)\n  horizonSize <- length(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[,\"WISE3_ID\"])\n  for(i in 1:horizonSize){\n    for(j in 1:wiseSize){\n      if (toString(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[i,\"WISE3_ID\"]) == toString(WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT[j,\"WISE3_ID\"])){\n        WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[i,\"cosine_similarity_index_stage_1\"] <- WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT[j,\"cosine_similarity_index_stage_1\"]\n      }\n    }\n  }\n  return(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST)\n}\nbindTextureAWCData <- function(user_infor_data,user_awc_data,soil_texture_data){\n  print(\"Start Binding data\")\n  plot_id <- user_infor_data$ID\n  text_1 <- user_infor_data$texture_for_soil_horizon_1\n  tuple_texture_sand_silt_clay <- subset(soil_texture_data,soil_texture_data$texture == toString(text_1),select = c(\"sand\",\"silt\",\"clay\"))\n  tuple_texture_all <- subset(soil_texture_data,soil_texture_data$texture == toString(text_1))\n  awc_profile <- as.numeric(user_awc_data[1,\"soil_profile_awc\"])\n  newList <- list(\"plot_id\" = plot_id, \"texture_sand_silt_clay\" = tuple_texture_sand_silt_clay,\"texture_all\" = tuple_texture_all, \"awc_profile\" = awc_profile)\n  return(newList)\n}\ncalculation_normalization <- function(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS,step_3_1_user_plot_data_numberous,check){\n  print(\"Start runing Normalization\")\n  number_rows <- length(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS[,check])\n  number_columns <- length(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS)\n  print(\"Number of Rows : \")\n  print(number_rows)\n  print(\"Number of Columns : \")\n  print(number_columns)\n  min_fields <- c()\n  max_fields <- c()\n  for (i in 1:number_columns){\n    min_fields[i] <- min(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS[i])\n    if (min_fields[i] > step_3_1_user_plot_data_numberous[i]){\n      min_fields[i] <- step_3_1_user_plot_data_numberous[i]\n    }\n    max_fields[i] <- max(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS[i])\n    if (max_fields[i] < step_3_1_user_plot_data_numberous[i]){\n      max_fields[i] <- step_3_1_user_plot_data_numberous[i]\n    }\n  }\n  #print(\"Min data : \")\n  #print(min_fields)\n  #print(\"Max data : \")\n  #print(max_fields)\n  \n  for(i in 1:number_rows){\n    for(j in 1:number_columns){\n      WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS[i,j] = (as.numeric(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS[i,j]) - as.numeric(min_fields[j])) / (as.numeric(max_fields[j]) - as.numeric(min_fields[j]))\n    }\n  }\n  \n  for(i in 1:number_columns){\n    step_3_1_user_plot_data_numberous[i] = (as.numeric(step_3_1_user_plot_data_numberous[i]) - as.numeric(min_fields[i])) / (as.numeric(max_fields[i]) - as.numeric(min_fields[i]))\n  }\n  print(\"Done : Normalization\")\n  newList <- list(\"WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS\" = WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS,\"step_3_1_user_plot_data_numberous\" = step_3_1_user_plot_data_numberous)\n  return(newList)\n}\n\ncalculation_similarity <- function(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS_NORM,step_3_1_user_plot_data_numberous_NORM,method){\n   if (method == \"cosine_vector_space_model\"){\n      size <- length(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS_NORM[,1])\n      cosine_similarity_array <- c()\n      for(i in 1:size){\n        cosine_similarity_array[i] <- cosine.sim(step_3_1_user_plot_data_numberous_NORM,WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS_NORM[i,])\n      }\n      return(cosine_similarity_array)\n  } else {\n    print(\"Does not support now\")\n    return(NULL)\n  }\n}\n\ncosine.sim <- function(A,B){\n  A <- as.numeric(A)\n  B <- as.numeric(B)\n  return(sum(A*B)/sqrt(sum(A^2)*sum(B^2)))\n}\n\n########################################\n####Read input of user record###########\n########################################\nsimilarity_method = 'cosine_vector_space_model'\n# Read User Data LandInfo\nall_user_info_data <- read.csv(file=\"./USER_INPUT_DATA/User_Input_LandInfo.csv\",head=TRUE,sep=\",\")\n# Read USer Data GDAL\nall_user_gdal_data <- read.csv(file=\"./USER_INPUT_DATA/User_Input_Global_GDAL.csv\",head=TRUE,sep=\",\")\n# Read USer Data AWC \nall_user_awc_data <- read.csv(file=\"./USER_INPUT_DATA/User_Input_Soil_AWC.csv\",head=TRUE,sep=\",\")\n# Read Soil Tecture Data\nsoil_texture_data <- read.csv(file=\"./USER_INPUT_DATA/User_Input_Texture.csv\",head=TRUE,sep=\",\")\n# Read all user data follow record_id\nuser_infor_data <- all_user_info_data[all_user_info_data$ID==plot_id,]\nuser_gdal_data <- all_user_gdal_data[all_user_gdal_data$record_id==plot_id,]\nuser_awc_data <- all_user_awc_data[all_user_awc_data$record_id==plot_id,]\n########################################\n####Read Wise Site Data + GDAL data#####\n########################################\nWISE_SITE_GDAL_STANDLIZATION_LIST <- read.csv(file=\"./LANDPKS_WISE_DATA/WISE3_LANDPKS_GDAL_STANDALIZATION.csv\",head=TRUE,sep=\",\")\n#################################################################################\n####Prepare user input to run similarity=== STAGE 1 == 3_1 Python == GDAL Data###\n#################################################################################\nstep_3_1_user_plot_data_Identify = user_gdal_data[,c(\"ID\",\"record_id\")]\nstep_3_1_user_plot_data_numberous = user_gdal_data[,c(\"latitude\",\"longitude\",\"clim_precipitation_data\",\"clim_gdd\",\"clim_aridity_index\",\"topog_elevation\",\"topog_slope_global\",\"topog_twi_global\",\"topog_topi_global\",\"topog_israd_global\")]\nstep_3_1_user_plot_data_category = user_gdal_data[,c(\"clim_kopgeiger\",\"clim_fao_lgp\",\"topog_geolage\",\"topog_landform_global\")]\nuser_data_surface_craking <- user_infor_data[1,\"surface_cracking\"]\n#####################################################################################\n####Prepare WISE GDAL Data to run similarity=== STAGE 1 == 3_1 Python == GDAL Data###\n####Preprocessing 1 : Use records that has same Kop-Geiger with user data############\n####Preprocessing 2 : If surface craking == TRUE, use only Vc, Vp        ############\n#####################################################################################\nif (user_data_surface_craking == \"true\" | user_data_surface_craking == \"TRUE\"){\n   WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED <- WISE_SITE_GDAL_STANDLIZATION_LIST[as.numeric(WISE_SITE_GDAL_STANDLIZATION_LIST$CLIM_KOPGEIGER)==as.numeric(step_3_1_user_plot_data_category[1]) & (WISE_SITE_GDAL_STANDLIZATION_LIST$WISE3_FAO_74 == \"Vp\" | WISE_SITE_GDAL_STANDLIZATION_LIST$WISE3_FAO_74 == \"Vc\"),]\n} else {\n   WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED <- WISE_SITE_GDAL_STANDLIZATION_LIST[as.numeric(WISE_SITE_GDAL_STANDLIZATION_LIST$CLIM_KOPGEIGER)==as.numeric(step_3_1_user_plot_data_category[1]),]\n}\nWISE_SITE_GDAL_STANDLIZATION_NUMBEROUS <- WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED[,c(\"LATITUDE_DECIMAL\",\"LONGITUDE_DECIMAL\",\"CLIM_PRECIPITATION_DATA\",\"CLIM_GDD\",\"CLIM_ARIDITY_INDEX\",\"topog_elevation\",\"topog_slope_global\",\"topog_twi_global\",\"topog_topi_global\",\"topog_israd_global\")]\nWISE_SITE_GDAL_STANDLIZATION_CATEGORY <- WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED[,c(\"CLIM_KOPGEIGER\",\"CKIM_FAO_LGP\",\"topog_geolage\",\"topog_landform_global\")]\n#####################################################################################\n####Calculate Normalization=== STAGE 1 == 3_1 Python == GDAL Data###\n#####################################################################################\nnormalizationDataList <- calculation_normalization(WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS,step_3_1_user_plot_data_numberous,\"LATITUDE_DECIMAL\")\n#####################################################################################\n####Calculate Similarity  === STAGE 1 == 3_1 Python == GDAL Data###\n#####################################################################################\ncosine_similarity_object <- calculation_similarity(normalizationDataList$WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS,normalizationDataList$step_3_1_user_plot_data_numberous,method =\"cosine_vector_space_model\")\n#####################################################################################\n####Add Cosine value to Data Store###\n#####################################################################################\nsize <- length(WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED[,1])\nfor(i in 1:size){\n  WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED[i,\"cosine_similarity_index_stage_1\"] <- cosine_similarity_object[i]\n}\n#####################################################################################\n####Sort to get 50 highest similarity value###\n#####################################################################################\nWISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT <- WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED[with(WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED, order(-cosine_similarity_object)), ]\nWISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT <- WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT[1:50,]\n#####################################################################################\n####Write Result to File -- Ending STAGE 1###\n#####################################################################################\ndir.create(\"./LANDPKS_WISE_DATA/Private\", showWarnings = FALSE, recursive = FALSE, mode = \"0777\")\nprivateDataPath <- paste0(\"./LANDPKS_WISE_DATA/Private/\",plot_id)\ndir.create(privateDataPath, showWarnings = FALSE, recursive = FALSE, mode = \"0777\")\nprivateDataPath_File <- paste0(privateDataPath,\"/Wise_3_LandPKS_GDAL_User_Data.csv\")\nfile.create(privateDataPath_File, showWarnings = FALSE, recursive = FALSE, mode = \"0777\")\nwrite.csv(user_gdal_data[,c(\"record_id\",\"latitude\", \"longitude\", \"clim_precipitation_data\",\"clim_gdd\",\"clim_aridity_index\",\"clim_kopgeiger\",\"clim_fao_lgp\",\"topog_elevation\",\"topog_geolage\",\"topog_slope_global\",\"topog_landform_global\",\"topog_twi_global\",\"topog_topi_global\",\"topog_israd_global\")], file = privateDataPath_File)\nprivateDataPath_File <- paste0(privateDataPath,\"/Wise_3_LandPKS_GDAL_Highest_Similarity_Index.csv\")\nfile.create(privateDataPath_File, showWarnings = FALSE, recursive = FALSE, mode = \"0777\")\nwrite.csv(WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT[,c(\"WISE3_ID\",\"LATITUDE_DECIMAL\", \"LONGITUDE_DECIMAL\", \"cosine_similarity_index_stage_1\",\"CLIM_PRECIPITATION_DATA\",\"CLIM_GDD\",\"CLIM_ARIDITY_INDEX\",\"CLIM_KOPGEIGER\",\"CKIM_FAO_LGP\",\"topog_elevation\",\"topog_geolage\",\"topog_slope_global\",\"topog_landform_global\",\"topog_twi_global\",\"topog_topi_global\",\"topog_israd_global\",\"WISE3_FAO_74\")], file = privateDataPath_File)\n########################################\n########################################\n########################################\n########################################\n########################################\n########################################\n########################################\n#####################################################################################\n####Start Stage 2 --- Finding Similarity based AWC and ORGC and Texture Soil Data####\n#####################################################################################\n#################################################################################\n####Prepare user input to run similarity=== STAGE 2 == 5_1 Python == GDAL Data###\n#################################################################################\nstep_5_1_user_plot_texture_awc_LIST <- bindTextureAWCData(user_infor_data,user_awc_data,soil_texture_data)\nstep_5_1_user_plot_texture_awc_numberous <- step_5_1_user_plot_texture_awc_LIST$texture_sand_silt_clay\nstep_5_1_user_plot_texture_awc_numberous$soil_profile_awc <- step_5_1_user_plot_texture_awc_LIST$awc_profile\n#################################################################################\n####Prepare WISE AWC ORGC to run similarity=== STAGE 2 == 5_1 Python == GDAL Data###\n#################################################################################\nWISE_HORIZON_AWC_ORGC_TEXTURE_LIST <- read.csv(file=\"./LANDPKS_WISE_DATA/WISE3_LANDPKS_HORIZON_AWC_ORGC_DATA.csv\",head=TRUE,sep=\",\")\n#################################################################################\n####Build Mapping Data Frame 50 hightest Stage 1 and HORIZON DATA###\n#################################################################################\nWISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST <- mappingStage1andStage2(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST,WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT)\nWISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST <- WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[with(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST, order(-cosine_similarity_index_stage_1)), ]\n#####################################################################################\n####Calculate Normalization=== STAGE 2 == 5_1 Python == AWC Texture Data###\n#####################################################################################\nWISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST_NUMBEROUS <- WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[,c(\"SAND\",\"SILT\",\"CLAY\",\"SOIL_PROFILE_AWC\")]\nnormalizationDataList_Stage2 <- calculation_normalization(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST_NUMBEROUS,step_5_1_user_plot_texture_awc_numberous,\"SAND\")\n#####################################################################################\n####Calculate Similarity  === STAGE 2 == 5_1 Python == GDAL Data###\n#####################################################################################\ncosine_similarity_object_Stage_2 <- calculation_similarity(normalizationDataList_Stage2$WISE_SITE_GDAL_STANDLIZATION_NUMBEROUS,normalizationDataList_Stage2$step_3_1_user_plot_data_numberous,method =\"cosine_vector_space_model\")\n#####################################################################################\n####Add Cosine value to Data Store###\n#####################################################################################\nsize <- length(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[,1])\nfor(i in 1:size){\n  WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[i,\"cosine_similarity_index_stage_2\"] <- cosine_similarity_object_Stage_2[i]\n}\n#####################################################################################\n####Sort to get 50 highest similarity value###\n#####################################################################################\nWISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST <- WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[with(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST, order(-cosine_similarity_index_stage_2)), ]\nWISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST <- WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_50_HIGHEST[1:5,]\n#####################################################################################\n####BUILD FINAL RESULT###\n#####################################################################################\nfinalSize <- length(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[,1])\nWISE_SITE_DATA <- read.csv(file=\"./ISRIC_WISE_DATABASE/WISE3_SITE.csv\",head=TRUE,sep=\",\")\nWISE_SITE_DATA <- subset(WISE_SITE_DATA,WISE_SITE_DATA$WISE3_id %in% WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST$WISE3_ID)\nfor(i in 1:finalSize){\n  for(j in 1:finalSize){\n    if (WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"WISE3_ID\"] == WISE_SITE_DATA[j,\"WISE3_id\"]){\n      WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"COUNTRY\"] = WISE_SITE_DATA[j,\"COUNTRY\"]\n      WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"SOLDEP\"] = WISE_SITE_DATA[j,\"SOLDEP\"]\n      WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"FAO_74\"] = WISE_SITE_DATA[j,\"FAO_74\"]\n      WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"USCL\"] = WISE_SITE_DATA[j,\"USCL\"]\n      WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"SLOPE\"] = WISE_SITE_DATA[j,\"SLOPE\"]\n    }\n  }\n}\n\nWISE_SITE_GDAL <- subset(WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT,WISE_SITE_GDAL_STANDLIZATION_LIST_SELECTED_RESULT$WISE3_ID %in% WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST$WISE3_ID)\nfor(i in 1:finalSize){\n  for(j in 1:finalSize){\n    if (WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"WISE3_ID\"] == toString(WISE_SITE_GDAL[j,\"WISE3_ID\"])){\n      WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"LATITUDE_DECIMAL\"] = WISE_SITE_GDAL[j,\"LATITUDE_DECIMAL\"]\n      WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[i,\"LONGITUDE_DECIMAL\"] = WISE_SITE_GDAL[j,\"LONGITUDE_DECIMAL\"]\n    }\n  }\n}\n\nprivateDataPath_File <- paste0(privateDataPath,\"/Wise_3_LandPKS_Final_Result_WISE.csv\")\nfile.create(privateDataPath_File, showWarnings = FALSE, recursive = FALSE, mode = \"0777\")\nwrite.csv(WISE_HORIZON_AWC_ORGC_TEXTURE_LIST_5_HIGHEST[,c(\"WISE3_ID\",\"LATITUDE_DECIMAL\", \"LONGITUDE_DECIMAL\", \"COUNTRY\",\"SOLDEP\",\"FAO_74\",\"USCL\",\"SLOPE\",\"cosine_similarity_index_stage_1\",\"cosine_similarity_index_stage_2\",\"HONU\",\"TOP_DEP\",\"BOT_DEP\",\"SAND\",\"SILT\",\"CLAY\",\"SOIL_PROFILE_AWC\")], file = privateDataPath_File)\n\n\nprivateDataPath_File <- paste0(privateDataPath,\"/Wise_3_LandPKS_Final_Result_USER_DATA.csv\")\nfile.create(privateDataPath_File, showWarnings = FALSE, recursive = FALSE, mode = \"0777\")\nwrite.csv(user_infor_data[,c(\"ID\",\"name\", \"recorder_name\", \"latitude\",\"longitude\",\"slope\",\"texture_for_soil_horizon_1\",\"texture_for_soil_horizon_2\",\"texture_for_soil_horizon_3\",\"texture_for_soil_horizon_4\",\"texture_for_soil_horizon_5\",\"texture_for_soil_horizon_6\",\"texture_for_soil_horizon_7\",\"surface_cracking\")], file = privateDataPath_File)",
    "created" : 1432006626419.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3803882968",
    "id" : "356C4C8F",
    "lastKnownWriteTime" : 1432011751,
    "path" : "/Volumes/Develop_Data_MacOS/All_Workspace/R_Workspace/Soil_Matching_Similarity/Run_Similarity_Model_Soil_Project.R",
    "project_path" : "Run_Similarity_Model_Soil_Project.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}